// This file is @generated by prost-build.
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Targetinfo {
    #[prost(message, repeated, tag = "6")]
    pub vanguard_ship_list: ::prost::alloc::vec::Vec<super::common::Shipinfo>,
    #[prost(string, required, tag = "3")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "8")]
    pub display: ::core::option::Option<super::common::Displayinfo>,
    #[prost(message, repeated, tag = "7")]
    pub main_ship_list: ::prost::alloc::vec::Vec<super::common::Shipinfo>,
    #[prost(uint32, required, tag = "5")]
    pub rank: u32,
    #[prost(uint32, required, tag = "2")]
    pub level: u32,
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
    #[prost(uint32, required, tag = "4")]
    pub score: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Arenarank {
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
    #[prost(string, required, tag = "3")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, required, tag = "2")]
    pub level: u32,
    #[prost(uint32, required, tag = "4")]
    pub score: u32,
    #[prost(message, optional, tag = "5")]
    pub display: ::core::option::Option<super::common::Displayinfo>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(18005)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc18005 {
    #[prost(message, repeated, tag = "3")]
    pub target_list: ::prost::alloc::vec::Vec<Targetinfo>,
    #[prost(uint32, required, tag = "2")]
    pub rank: u32,
    #[prost(uint32, required, tag = "1")]
    pub score: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(18201)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs18201 {
    #[prost(uint32, optional, tag = "3")]
    pub act_id: ::core::option::Option<u32>,
    #[prost(uint32, required, tag = "1")]
    pub page: u32,
    #[prost(uint32, required, tag = "2")]
    pub r#type: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(18202)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc18202 {
    #[prost(message, repeated, tag = "1")]
    pub list: ::prost::alloc::vec::Vec<RankInfo>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(18105)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc18105 {
    #[prost(message, required, tag = "1")]
    pub info: Targetinfo,
}
#[derive(proto_derive::CmdID)]
#[cmdid(18006)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs18006 {
    #[prost(uint32, required, tag = "1")]
    pub r#type: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(18007)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc18007 {
    #[prost(message, repeated, tag = "1")]
    pub arena_rank_lsit: ::prost::alloc::vec::Vec<Arenarank>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(18003)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs18003 {
    #[prost(uint32, required, tag = "1")]
    pub r#type: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(18001)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs18001 {
    #[prost(uint32, required, tag = "1")]
    pub r#type: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(18203)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs18203 {
    #[prost(uint32, optional, tag = "2")]
    pub act_id: ::core::option::Option<u32>,
    #[prost(uint32, required, tag = "1")]
    pub r#type: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(18101)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc18101 {
    #[prost(message, repeated, tag = "2")]
    pub arena_shop_list: ::prost::alloc::vec::Vec<Arenashop>,
    #[prost(uint32, required, tag = "1")]
    pub flash_count: u32,
    #[prost(uint32, required, tag = "3")]
    pub next_flash_time: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(18204)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc18204 {
    #[prost(uint32, required, tag = "2")]
    pub rank: u32,
    #[prost(uint32, required, tag = "1")]
    pub point: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(18100)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs18100 {
    #[prost(uint32, required, tag = "1")]
    pub r#type: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(18004)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc18004 {
    #[prost(message, repeated, tag = "2")]
    pub target_list: ::prost::alloc::vec::Vec<Targetinfo>,
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(18102)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs18102 {
    #[prost(uint32, required, tag = "1")]
    pub r#type: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(18002)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc18002 {
    #[prost(uint32, required, tag = "2")]
    pub rank: u32,
    #[prost(uint32, repeated, packed = "false", tag = "6")]
    pub vanguard_ship_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, required, tag = "5")]
    pub flash_target_count: u32,
    #[prost(uint32, required, tag = "1")]
    pub score: u32,
    #[prost(uint32, required, tag = "3")]
    pub fight_count: u32,
    #[prost(uint32, repeated, packed = "false", tag = "7")]
    pub main_ship_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, required, tag = "4")]
    pub fight_count_reset_time: u32,
    #[prost(message, repeated, tag = "8")]
    pub target_list: ::prost::alloc::vec::Vec<Targetinfo>,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RankInfo {
    #[prost(uint32, required, tag = "2")]
    pub point: u32,
    #[prost(string, required, tag = "3")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, required, tag = "1")]
    pub user_id: u32,
    #[prost(message, optional, tag = "6")]
    pub display: ::core::option::Option<super::common::Displayinfo>,
    #[prost(uint32, required, tag = "4")]
    pub lv: u32,
    #[prost(uint32, required, tag = "5")]
    pub arena_rank: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(18104)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs18104 {
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(18008)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs18008 {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub vanguard_ship_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub main_ship_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(18009)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc18009 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Arenashop {
    #[prost(uint32, required, tag = "1")]
    pub shop_id: u32,
    #[prost(uint32, required, tag = "2")]
    pub count: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(18103)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc18103 {
    #[prost(message, repeated, tag = "2")]
    pub arena_shop_list: ::prost::alloc::vec::Vec<Arenashop>,
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}