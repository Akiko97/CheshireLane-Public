// This file is @generated by prost-build.
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cooldown {
    #[prost(uint32, required, tag = "1")]
    pub key: u32,
    #[prost(uint32, required, tag = "2")]
    pub timestamp: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11028)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11028 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11751)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11751 {
    #[prost(uint32, required, tag = "1")]
    pub r#type: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11511)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11511 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11720)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs11720 {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub chat_group_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11008)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11008 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReturnUserInfo {
    #[prost(uint32, required, tag = "2")]
    pub pt: u32,
    #[prost(message, required, tag = "1")]
    pub user: super::common::Usersimpleinfo,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11006)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11006 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11715)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11715 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11801)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11801 {
    #[prost(uint32, required, tag = "1")]
    pub ship_count: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11208)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11208 {
    #[prost(uint32, required, tag = "1")]
    pub activity_id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11722)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs11722 {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub chat_group_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11721)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11721 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11010)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11010 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11022)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11022 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11029)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs11029 {
    #[prost(uint32, required, tag = "3")]
    pub int_arg2: u32,
    #[prost(string, required, tag = "5")]
    pub str_arg1: ::prost::alloc::string::String,
    #[prost(uint32, required, tag = "1")]
    pub track_typ: u32,
    #[prost(uint32, required, tag = "4")]
    pub int_arg3: u32,
    #[prost(uint32, required, tag = "2")]
    pub int_arg1: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Benefitbuff {
    #[prost(uint32, required, tag = "2")]
    pub timestamp: u32,
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11514)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc11514 {
    #[prost(string, required, tag = "2")]
    pub pay_id: ::prost::alloc::string::String,
    #[prost(string, required, tag = "4")]
    pub order_sign: ::prost::alloc::string::String,
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
    #[prost(string, required, tag = "3")]
    pub url: ::prost::alloc::string::String,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JuusChatGroup {
    #[prost(uint32, required, tag = "3")]
    pub read_flag: u32,
    #[prost(uint32, required, tag = "2")]
    pub op_time: u32,
    #[prost(message, repeated, tag = "4")]
    pub reply_list: ::prost::alloc::vec::Vec<Keyvalue>,
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11209)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11209 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11030)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11030 {
    #[prost(uint32, required, tag = "1")]
    pub livingarea_cover_id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11704)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc11704 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<InsMessage>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11723)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc11723 {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub result_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, required, tag = "2")]
    pub op_time: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11703)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11703 {
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
    #[prost(uint32, required, tag = "2")]
    pub discuss: u32,
    #[prost(uint32, required, tag = "3")]
    pub index: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11501)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11501 {
    #[prost(uint32, required, tag = "1")]
    pub shop_id: u32,
    #[prost(uint32, required, tag = "2")]
    pub device: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11023)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11023 {
    #[prost(uint32, required, tag = "1")]
    pub r#type: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Resource {
    #[prost(uint32, required, tag = "1")]
    pub r#type: u32,
    #[prost(uint32, required, tag = "2")]
    pub num: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11202)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs11202 {
    #[prost(uint32, optional, tag = "4")]
    pub arg2: ::core::option::Option<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "6")]
    pub arg_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub arg1: ::core::option::Option<u32>,
    #[prost(uint32, required, tag = "2")]
    pub cmd: u32,
    #[prost(message, repeated, tag = "8")]
    pub kvargs1: ::prost::alloc::vec::Vec<super::common::Kvdata>,
    #[prost(uint32, repeated, packed = "false", tag = "7")]
    pub arg_list2: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub arg3: ::core::option::Option<u32>,
    #[prost(uint32, required, tag = "1")]
    pub activity_id: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InsMessage {
    #[prost(uint32, required, tag = "10")]
    pub is_read: u32,
    #[prost(message, repeated, tag = "5")]
    pub player_discuss: ::prost::alloc::vec::Vec<InsPlayer>,
    #[prost(message, repeated, tag = "7")]
    pub npc_reply: ::prost::alloc::vec::Vec<InsNpc>,
    #[prost(message, repeated, tag = "6")]
    pub npc_discuss: ::prost::alloc::vec::Vec<InsNpc>,
    #[prost(uint32, required, tag = "2")]
    pub time: u32,
    #[prost(uint32, required, tag = "9")]
    pub is_good: u32,
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
    #[prost(string, required, tag = "3")]
    pub text: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "4")]
    pub picture: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, required, tag = "8")]
    pub good: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11510)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs11510 {
    #[prost(string, required, tag = "1")]
    pub pay_id: ::prost::alloc::string::String,
    #[prost(uint32, required, tag = "2")]
    pub code: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11021)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11021 {
    #[prost(uint32, required, tag = "1")]
    pub flag_id: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InsPlayer {
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
    #[prost(string, repeated, tag = "3")]
    pub text_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, required, tag = "2")]
    pub time: u32,
    #[prost(uint32, required, tag = "5")]
    pub npc_reply: u32,
    #[prost(string, required, tag = "4")]
    pub text: ::prost::alloc::string::String,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Keyvalue {
    #[prost(uint32, required, tag = "1")]
    pub key: u32,
    #[prost(uint32, required, tag = "2")]
    pub value: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11200)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc11200 {
    #[prost(message, repeated, tag = "1")]
    pub activity_list: ::prost::alloc::vec::Vec<Activityinfo>,
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub hx_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11712)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11712 {
    #[prost(uint32, required, tag = "1")]
    pub chat_group_id: u32,
    #[prost(uint32, required, tag = "2")]
    pub chat_id: u32,
    #[prost(uint32, required, tag = "3")]
    pub value: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11018)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc11018 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
    #[prost(message, repeated, tag = "2")]
    pub drop_list: ::prost::alloc::vec::Vec<super::common::Dropinfo>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11201)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc11201 {
    #[prost(message, required, tag = "1")]
    pub activity_info: Activityinfo,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11603)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11603 {
    #[prost(uint32, required, tag = "1")]
    pub r#type: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11012)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11012 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11756)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc11756 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
    #[prost(message, repeated, tag = "2")]
    pub award_list: ::prost::alloc::vec::Vec<super::common::Dropinfo>,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cardinfo {
    #[prost(uint32, required, tag = "2")]
    pub left_date: u32,
    #[prost(uint32, required, tag = "1")]
    pub r#type: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11719)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11719 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11025)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11025 {
    #[prost(uint32, required, tag = "1")]
    pub survey_id: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LivingareaCover {
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub covers: ::prost::alloc::vec::Vec<u32>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11507)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11507 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11754)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc11754 {
    #[prost(message, repeated, tag = "2")]
    pub award_list: ::prost::alloc::vec::Vec<super::common::Dropinfo>,
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11701)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11701 {
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
    #[prost(uint32, required, tag = "2")]
    pub cmd: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11402)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11402 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
    #[prost(uint32, required, tag = "2")]
    pub room_id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11001)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11001 {
    #[prost(uint32, required, tag = "1")]
    pub timestamp: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11608)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11608 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InsNpc {
    #[prost(uint32, required, tag = "2")]
    pub time: u32,
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
    #[prost(string, required, tag = "3")]
    pub text: ::prost::alloc::string::String,
    #[prost(uint32, repeated, packed = "false", tag = "4")]
    pub npc_reply: ::prost::alloc::vec::Vec<u32>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11502)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc11502 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
    #[prost(string, required, tag = "2")]
    pub pay_id: ::prost::alloc::string::String,
    #[prost(string, required, tag = "4")]
    pub order_sign: ::prost::alloc::string::String,
    #[prost(string, required, tag = "3")]
    pub url: ::prost::alloc::string::String,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11027)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11027 {
    #[prost(uint32, required, tag = "1")]
    pub survey_id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11752)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11752 {
    #[prost(uint32, optional, tag = "2")]
    pub return_lv: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub return_time: ::core::option::Option<u32>,
    #[prost(uint32, required, tag = "1")]
    pub active: u32,
    #[prost(uint32, optional, tag = "8")]
    pub sign_last_time: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub pt: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub ship_number: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "9")]
    pub pt_stage: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub last_offline_time: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub sign_cnt: ::core::option::Option<u32>,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Noticeinfo {
    #[prost(uint32, required, tag = "8")]
    pub tag_type: u32,
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
    #[prost(string, required, tag = "2")]
    pub version: ::prost::alloc::string::String,
    #[prost(uint32, required, tag = "9")]
    pub icon: u32,
    #[prost(string, required, tag = "7")]
    pub content: ::prost::alloc::string::String,
    #[prost(string, required, tag = "4")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, required, tag = "10")]
    pub track: ::prost::alloc::string::String,
    #[prost(uint32, required, tag = "11")]
    pub priority: u32,
    #[prost(string, required, tag = "3")]
    pub btn_title: ::prost::alloc::string::String,
    #[prost(string, required, tag = "5")]
    pub title_image: ::prost::alloc::string::String,
    #[prost(string, required, tag = "6")]
    pub time_desc: ::prost::alloc::string::String,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11206)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11206 {
    #[prost(uint32, required, tag = "1")]
    pub activity_id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11003)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc11003 {
    #[prost(uint32, required, tag = "6")]
    pub attack_count: u32,
    #[prost(message, repeated, tag = "32")]
    pub icon_frame_list: ::prost::alloc::vec::Vec<super::common::Idtimeinfo>,
    #[prost(message, repeated, tag = "29")]
    pub cd_list: ::prost::alloc::vec::Vec<Cooldown>,
    #[prost(uint32, required, tag = "35")]
    pub rmb: u32,
    #[prost(uint32, required, tag = "10")]
    pub ship_bag_max: u32,
    #[prost(message, repeated, tag = "44")]
    pub taking_ship_list: ::prost::alloc::vec::Vec<ShipTakingData>,
    #[prost(uint32, required, tag = "30")]
    pub commander_bag_max: u32,
    #[prost(string, required, tag = "8")]
    pub adv: ::prost::alloc::string::String,
    #[prost(uint32, required, tag = "24")]
    pub acc_pay_lv: u32,
    #[prost(message, optional, tag = "34")]
    pub display: ::core::option::Option<super::common::Displayinfo>,
    #[prost(uint32, required, tag = "46")]
    pub child_display: u32,
    #[prost(message, required, tag = "47")]
    pub cover: LivingareaCover,
    #[prost(uint32, repeated, packed = "false", tag = "49")]
    pub battle_ui_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "51")]
    pub activity_medals: ::prost::alloc::vec::Vec<super::common::Kvdata>,
    #[prost(uint32, required, tag = "14")]
    pub pvp_attack_count: u32,
    #[prost(uint32, required, tag = "19")]
    pub chat_room_id: u32,
    #[prost(uint32, required, tag = "21")]
    pub max_rank: u32,
    #[prost(uint32, required, tag = "23")]
    pub ship_count: u32,
    #[prost(uint32, repeated, packed = "false", tag = "28")]
    pub flag_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, required, tag = "41")]
    pub random_ship_mode: u32,
    #[prost(uint32, required, tag = "13")]
    pub rank: u32,
    #[prost(uint32, required, tag = "16")]
    pub collect_attack_count: u32,
    #[prost(uint32, repeated, packed = "false", tag = "40")]
    pub cartoon_collect_mark: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, required, tag = "17")]
    pub guide_index: u32,
    #[prost(uint32, required, tag = "7")]
    pub win_count: u32,
    #[prost(message, required, tag = "36")]
    pub appreciation: super::common::Appreciationinfo,
    #[prost(uint32, repeated, packed = "false", tag = "9")]
    pub character: ::prost::alloc::vec::Vec<u32>,
    #[prost(string, required, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, required, tag = "4")]
    pub exp: u32,
    #[prost(uint32, required, tag = "26")]
    pub guild_wait_time: u32,
    #[prost(message, repeated, tag = "20")]
    pub card_list: ::prost::alloc::vec::Vec<Cardinfo>,
    #[prost(uint32, required, tag = "11")]
    pub equip_bag_max: u32,
    #[prost(uint32, required, tag = "15")]
    pub pvp_win_count: u32,
    #[prost(message, repeated, tag = "33")]
    pub chat_frame_list: ::prost::alloc::vec::Vec<super::common::Idtimeinfo>,
    #[prost(uint32, repeated, packed = "false", tag = "39")]
    pub cartoon_read_mark: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "45")]
    pub soundstory: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "5")]
    pub resource_list: ::prost::alloc::vec::Vec<Resource>,
    #[prost(uint32, repeated, packed = "false", tag = "25")]
    pub story_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "42")]
    pub random_ship_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
    #[prost(uint32, required, tag = "37")]
    pub theme_upload_not_allowed_time: u32,
    #[prost(uint32, required, tag = "43")]
    pub marry_ship: u32,
    #[prost(uint32, repeated, packed = "false", tag = "31")]
    pub medal_id: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, required, tag = "27")]
    pub chat_msg_ban_time: u32,
    #[prost(uint32, required, tag = "48")]
    pub mail_storeroom_lv: u32,
    #[prost(uint32, required, tag = "22")]
    pub register_time: u32,
    #[prost(uint32, required, tag = "50")]
    pub battle_ui: u32,
    #[prost(uint32, required, tag = "18")]
    pub buy_oil_count: u32,
    #[prost(message, repeated, tag = "38")]
    pub refund_shop_info_list: ::prost::alloc::vec::Vec<super::common::RefundShopinfo>,
    #[prost(uint32, required, tag = "12")]
    pub gm_flag: u32,
    #[prost(uint32, required, tag = "3")]
    pub level: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11009)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs11009 {
    #[prost(string, required, tag = "1")]
    pub adv: ::prost::alloc::string::String,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11506)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11506 {
    #[prost(uint32, required, tag = "1")]
    pub state: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11020)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11020 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11610)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11610 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11015)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc11015 {
    #[prost(message, repeated, tag = "1")]
    pub buff_list: ::prost::alloc::vec::Vec<Benefitbuff>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11609)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs11609 {
    #[prost(string, required, tag = "1")]
    pub password: ::prost::alloc::string::String,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11508)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs11508 {
    #[prost(string, required, tag = "2")]
    pub platform: ::prost::alloc::string::String,
    #[prost(string, required, tag = "1")]
    pub key: ::prost::alloc::string::String,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11017)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11017 {
    #[prost(uint32, required, tag = "1")]
    pub story_id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11007)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs11007 {
    #[prost(uint32, required, tag = "1")]
    pub r#type: u32,
    #[prost(string, required, tag = "2")]
    pub name: ::prost::alloc::string::String,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11607)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs11607 {
    #[prost(string, required, tag = "1")]
    pub password: ::prost::alloc::string::String,
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub system_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11509)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11509 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11014)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11014 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11503)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc11503 {
    #[prost(uint32, required, tag = "1")]
    pub shop_id: u32,
    #[prost(uint32, required, tag = "4")]
    pub gem_free: u32,
    #[prost(uint32, required, tag = "3")]
    pub gem: u32,
    #[prost(string, required, tag = "2")]
    pub pay_id: ::prost::alloc::string::String,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11300)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc11300 {
    #[prost(message, repeated, tag = "1")]
    pub notice_list: ::prost::alloc::vec::Vec<Noticeinfo>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11700)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc11700 {
    #[prost(message, repeated, tag = "1")]
    pub ins_message_list: ::prost::alloc::vec::Vec<InsMessage>,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JuusGroup {
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
    #[prost(uint32, required, tag = "2")]
    pub skin_id: u32,
    #[prost(message, repeated, tag = "5")]
    pub chat_group_list: ::prost::alloc::vec::Vec<JuusChatGroup>,
    #[prost(uint32, required, tag = "3")]
    pub favorite: u32,
    #[prost(uint32, required, tag = "4")]
    pub cur_chat_group: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11026)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11026 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11005)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11005 {
    #[prost(uint32, required, tag = "2")]
    pub id: u32,
    #[prost(uint32, required, tag = "1")]
    pub r#type: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11004)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc11004 {
    #[prost(message, repeated, tag = "1")]
    pub resource_list: ::prost::alloc::vec::Vec<Resource>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11606)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11606 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11000)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11000 {
    #[prost(uint32, required, tag = "1")]
    pub timestamp: u32,
    #[prost(uint32, required, tag = "2")]
    pub monday_0oclock_timestamp: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11505)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11505 {
    #[prost(uint32, required, tag = "2")]
    pub shop_id: u32,
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
    #[prost(uint32, required, tag = "3")]
    pub gem: u32,
    #[prost(uint32, required, tag = "4")]
    pub gem_free: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11513)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11513 {
    #[prost(uint32, required, tag = "1")]
    pub shop_id: u32,
    #[prost(uint32, required, tag = "2")]
    pub device: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11711)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc11711 {
    #[prost(message, repeated, tag = "1")]
    pub groups: ::prost::alloc::vec::Vec<JuusGroup>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11002)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11002 {
    #[prost(uint32, required, tag = "1")]
    pub timestamp: u32,
    #[prost(uint32, required, tag = "3")]
    pub ship_count: u32,
    #[prost(uint32, required, tag = "2")]
    pub monday_0oclock_timestamp: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11755)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11755 {
    #[prost(uint32, required, tag = "1")]
    pub r#type: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11212)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11212 {
    #[prost(uint32, required, tag = "1")]
    pub track_typ: u32,
    #[prost(uint32, required, tag = "2")]
    pub ship_tid: u32,
    #[prost(uint32, required, tag = "3")]
    pub from: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Groupinfo {
    #[prost(message, repeated, tag = "3")]
    pub commanders: ::prost::alloc::vec::Vec<super::common::Commandersinfo>,
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub ship_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11802)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11802 {
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
    #[prost(uint32, required, tag = "2")]
    pub value: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11100)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs11100 {
    #[prost(string, optional, tag = "4")]
    pub arg3: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, required, tag = "1")]
    pub cmd: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub arg1: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub arg2: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub arg4: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Activityinfo {
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
    #[prost(message, repeated, tag = "11")]
    pub group_list: ::prost::alloc::vec::Vec<Groupinfo>,
    #[prost(uint32, optional, tag = "5")]
    pub data3: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "13")]
    pub collection_list: ::prost::alloc::vec::Vec<super::common::Collectioninfo>,
    #[prost(message, repeated, tag = "10")]
    pub date1_key_value_list: ::prost::alloc::vec::Vec<Keyvaluelist>,
    #[prost(uint32, repeated, packed = "false", tag = "17")]
    pub data4_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "9")]
    pub data3_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub data2: ::core::option::Option<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "7")]
    pub data1_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub data4: ::core::option::Option<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "8")]
    pub data2_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(string, optional, tag = "16")]
    pub str_data1: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, required, tag = "2")]
    pub stop_time: u32,
    #[prost(uint32, optional, tag = "3")]
    pub data1: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "14")]
    pub task_list: ::prost::alloc::vec::Vec<super::common::Taskinfo>,
    #[prost(message, repeated, tag = "15")]
    pub buff_list: ::prost::alloc::vec::Vec<Benefitbuff>,
    #[prost(message, repeated, tag = "12")]
    pub ins_message_list: ::prost::alloc::vec::Vec<InsMessage>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11714)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11714 {
    #[prost(uint32, required, tag = "1")]
    pub group_id: u32,
    #[prost(uint32, required, tag = "2")]
    pub skin_id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11016)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11016 {
    #[prost(uint32, required, tag = "1")]
    pub guide_index: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Keyvaluelist {
    #[prost(uint32, required, tag = "1")]
    pub key: u32,
    #[prost(uint32, optional, tag = "3")]
    pub value: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "2")]
    pub value_list: ::prost::alloc::vec::Vec<Keyvalue>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11602)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc11602 {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub emoji_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11605)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs11605 {
    #[prost(string, required, tag = "1")]
    pub password: ::prost::alloc::string::String,
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub system_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(string, required, tag = "3")]
    pub notice: ::prost::alloc::string::String,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11800)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11800 {
    #[prost(uint32, required, tag = "1")]
    pub r#type: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11024)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc11024 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
    #[prost(message, repeated, tag = "2")]
    pub shop_info: ::prost::alloc::vec::Vec<super::common::RefundShopinfo>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11604)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc11604 {
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub system_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(string, optional, tag = "5")]
    pub notice: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, required, tag = "1")]
    pub state: u32,
    #[prost(uint32, optional, tag = "3")]
    pub fail_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub fail_cd: ::core::option::Option<u32>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11717)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11717 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11716)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11716 {
    #[prost(uint32, required, tag = "1")]
    pub group_id: u32,
    #[prost(uint32, required, tag = "2")]
    pub value: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11203)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc11203 {
    #[prost(uint32, repeated, packed = "false", tag = "4")]
    pub number: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "2")]
    pub award_list: ::prost::alloc::vec::Vec<super::common::Dropinfo>,
    #[prost(message, repeated, tag = "7")]
    pub collection_list: ::prost::alloc::vec::Vec<super::common::Collectioninfo>,
    #[prost(message, repeated, tag = "5")]
    pub return_user_list: ::prost::alloc::vec::Vec<ReturnUserInfo>,
    #[prost(message, repeated, tag = "8")]
    pub task_list: ::prost::alloc::vec::Vec<super::common::Taskinfo>,
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
    #[prost(message, repeated, tag = "3")]
    pub build: ::prost::alloc::vec::Vec<super::common::Buildinfo>,
    #[prost(message, optional, tag = "6")]
    pub ins_message: ::core::option::Option<InsMessage>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11504)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs11504 {
    #[prost(string, required, tag = "1")]
    pub pay_id: ::prost::alloc::string::String,
    #[prost(string, required, tag = "2")]
    pub pay_id_bili: ::prost::alloc::string::String,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11101)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc11101 {
    #[prost(string, optional, tag = "2")]
    pub msg: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11601)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11601 {
    #[prost(uint32, required, tag = "1")]
    pub r#type: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11702)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc11702 {
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<InsMessage>,
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11205)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11205 {
    #[prost(uint32, required, tag = "2")]
    pub result: u32,
    #[prost(uint32, required, tag = "1")]
    pub activity_id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11718)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11718 {
    #[prost(uint32, required, tag = "1")]
    pub chat_group_id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11713)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc11713 {
    #[prost(uint32, required, tag = "2")]
    pub op_time: u32,
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
    #[prost(message, repeated, tag = "3")]
    pub drop_list: ::prost::alloc::vec::Vec<super::common::Dropinfo>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11401)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11401 {
    #[prost(uint32, required, tag = "1")]
    pub room_id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11013)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11013 {
    #[prost(uint32, required, tag = "2")]
    pub number: u32,
    #[prost(uint32, required, tag = "1")]
    pub r#type: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11031)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11031 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11753)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11753 {
    #[prost(uint32, required, tag = "1")]
    pub r#type: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11210)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc11210 {
    #[prost(uint32, required, tag = "2")]
    pub permanent_now: u32,
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub permanent_activity: ::prost::alloc::vec::Vec<u32>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11204)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs11204 {
    #[prost(message, repeated, tag = "2")]
    pub group_list: ::prost::alloc::vec::Vec<Groupinfo>,
    #[prost(uint32, required, tag = "1")]
    pub activity_id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11207)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc11207 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mulkeyvalue {
    #[prost(uint32, required, tag = "2")]
    pub value1: u32,
    #[prost(uint32, required, tag = "1")]
    pub key: u32,
    #[prost(uint32, optional, tag = "3")]
    pub value2: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub value3: ::core::option::Option<u32>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11019)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11019 {
    #[prost(uint32, required, tag = "1")]
    pub flag_id: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ShipTakingData {
    #[prost(uint32, required, tag = "1")]
    pub uid: u32,
    #[prost(uint32, required, tag = "2")]
    pub isnew: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11710)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs11710 {
    #[prost(uint32, required, tag = "1")]
    pub r#type: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(11011)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs11011 {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub character: ::prost::alloc::vec::Vec<u32>,
}