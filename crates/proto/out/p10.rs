// This file is @generated by prost-build.
#[derive(proto_derive::CmdID)]
#[cmdid(10020)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs10020 {
    #[prost(string, optional, tag = "5")]
    pub arg4: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, required, tag = "6")]
    pub check_key: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "3")]
    pub arg2: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, required, tag = "1")]
    pub login_type: u32,
    #[prost(string, optional, tag = "4")]
    pub arg3: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, required, tag = "2")]
    pub arg1: ::prost::alloc::string::String,
    #[prost(uint32, optional, tag = "7")]
    pub device: ::core::option::Option<u32>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10997)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc10997 {
    #[prost(string, required, tag = "5")]
    pub gateway_ip: ::prost::alloc::string::String,
    #[prost(string, required, tag = "7")]
    pub url: ::prost::alloc::string::String,
    #[prost(uint32, required, tag = "1")]
    pub version1: u32,
    #[prost(uint32, required, tag = "2")]
    pub version2: u32,
    #[prost(uint32, required, tag = "3")]
    pub version3: u32,
    #[prost(uint32, required, tag = "4")]
    pub version4: u32,
    #[prost(uint32, required, tag = "6")]
    pub gateway_port: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10022)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs10022 {
    #[prost(uint32, required, tag = "1")]
    pub account_id: u32,
    #[prost(string, required, tag = "2")]
    pub server_ticket: ::prost::alloc::string::String,
    #[prost(string, required, tag = "3")]
    pub platform: ::prost::alloc::string::String,
    #[prost(uint32, required, tag = "4")]
    pub serverid: u32,
    #[prost(string, required, tag = "5")]
    pub check_key: ::prost::alloc::string::String,
    #[prost(string, required, tag = "6")]
    pub device_id: ::prost::alloc::string::String,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10100)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs10100 {
    #[prost(uint32, required, tag = "1")]
    pub need_request: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10025)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc10025 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
    #[prost(uint32, required, tag = "2")]
    pub user_id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10026)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs10026 {
    #[prost(uint32, required, tag = "1")]
    pub account_id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10803)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc10803 {
    #[prost(uint32, required, tag = "2")]
    pub gateway_port: u32,
    #[prost(string, required, tag = "1")]
    pub gateway_ip: ::prost::alloc::string::String,
    #[prost(uint32, optional, tag = "4")]
    pub proxy_port: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "3")]
    pub proxy_ip: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10002)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc10002 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Noticeinfo {
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
    #[prost(string, required, tag = "2")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, required, tag = "3")]
    pub content: ::prost::alloc::string::String,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10800)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs10800 {
    #[prost(uint32, required, tag = "1")]
    pub state: u32,
    #[prost(string, required, tag = "2")]
    pub platform: ::prost::alloc::string::String,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10001)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs10001 {
    #[prost(string, required, tag = "3")]
    pub mail_box: ::prost::alloc::string::String,
    #[prost(string, required, tag = "1")]
    pub account: ::prost::alloc::string::String,
    #[prost(string, required, tag = "2")]
    pub password: ::prost::alloc::string::String,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10021)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc10021 {
    #[prost(message, repeated, tag = "5")]
    pub notice_list: ::prost::alloc::vec::Vec<Noticeinfo>,
    #[prost(uint32, repeated, packed = "false", tag = "7")]
    pub limit_server_ids: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub device: ::core::option::Option<u32>,
    #[prost(uint32, required, tag = "3")]
    pub account_id: u32,
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
    #[prost(string, required, tag = "4")]
    pub server_ticket: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub serverlist: ::prost::alloc::vec::Vec<Serverinfo>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10992)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs10992 {
    #[prost(uint32, required, tag = "2")]
    pub event_id: u32,
    #[prost(string, required, tag = "4")]
    pub para2: ::prost::alloc::string::String,
    #[prost(uint32, required, tag = "1")]
    pub track_type: u32,
    #[prost(string, required, tag = "3")]
    pub para1: ::prost::alloc::string::String,
    #[prost(string, required, tag = "5")]
    pub para3: ::prost::alloc::string::String,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10999)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc10999 {
    #[prost(uint32, required, tag = "1")]
    pub reason: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10998)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc10998 {
    #[prost(uint32, required, tag = "2")]
    pub result: u32,
    #[prost(uint32, required, tag = "1")]
    pub cmd: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10101)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc10101 {
    #[prost(uint32, required, tag = "1")]
    pub state: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrackInfo {
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub int_args: ::prost::alloc::vec::Vec<i32>,
    #[prost(string, repeated, tag = "4")]
    pub str_args: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, required, tag = "2")]
    pub track_time: u32,
    #[prost(uint32, required, tag = "1")]
    pub track_typ: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10995)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc10995 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Serverinfo {
    #[prost(string, required, tag = "2")]
    pub ip: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "8")]
    pub proxy_ip: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "9")]
    pub proxy_port: ::core::option::Option<u32>,
    #[prost(uint32, required, tag = "4")]
    pub state: u32,
    #[prost(uint32, optional, tag = "7")]
    pub sort: ::core::option::Option<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, required, tag = "3")]
    pub port: u32,
    #[prost(string, required, tag = "5")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, optional, tag = "6")]
    pub tag_state: ::core::option::Option<u32>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10027)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc10027 {
    #[prost(uint32, required, tag = "1")]
    pub user_id: u32,
    #[prost(uint32, required, tag = "2")]
    pub level: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10801)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc10801 {
    #[prost(string, repeated, tag = "4")]
    pub version: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "10")]
    pub cdn_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, required, tag = "1")]
    pub gateway_ip: ::prost::alloc::string::String,
    #[prost(uint32, required, tag = "9")]
    pub monday_0oclock_timestamp: u32,
    #[prost(uint32, required, tag = "7")]
    pub is_ts: u32,
    #[prost(uint32, required, tag = "8")]
    pub timestamp: u32,
    #[prost(uint32, required, tag = "2")]
    pub gateway_port: u32,
    #[prost(uint32, optional, tag = "6")]
    pub proxy_port: ::core::option::Option<u32>,
    #[prost(string, required, tag = "3")]
    pub url: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "5")]
    pub proxy_ip: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10991)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs10991 {
    #[prost(message, repeated, tag = "1")]
    pub infos: ::prost::alloc::vec::Vec<TrackInfo>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10018)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs10018 {
    #[prost(uint32, required, tag = "1")]
    pub arg: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10996)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs10996 {
    #[prost(uint32, required, tag = "1")]
    pub state: u32,
    #[prost(string, required, tag = "2")]
    pub platform: ::prost::alloc::string::String,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10024)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs10024 {
    #[prost(uint32, required, tag = "2")]
    pub ship_id: u32,
    #[prost(string, required, tag = "3")]
    pub device_id: ::prost::alloc::string::String,
    #[prost(string, required, tag = "1")]
    pub nick_name: ::prost::alloc::string::String,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10802)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs10802 {
    #[prost(uint32, required, tag = "2")]
    pub platform: u32,
    #[prost(uint32, required, tag = "1")]
    pub state: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10701)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc10701 {
    #[prost(message, repeated, tag = "3")]
    pub addr_list: ::prost::alloc::vec::Vec<LoginAddr>,
    #[prost(string, repeated, tag = "2")]
    pub version: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, required, tag = "4")]
    pub timestamp: u32,
    #[prost(string, required, tag = "1")]
    pub url: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "6")]
    pub cdn_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, required, tag = "5")]
    pub monday_0oclock_timestamp: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoginAddr {
    #[prost(string, required, tag = "2")]
    pub ip: ::prost::alloc::string::String,
    #[prost(uint32, required, tag = "6")]
    pub r#type: u32,
    #[prost(string, required, tag = "1")]
    pub desc: ::prost::alloc::string::String,
    #[prost(uint32, required, tag = "3")]
    pub port: u32,
    #[prost(string, optional, tag = "4")]
    pub proxy_ip: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "5")]
    pub proxy_port: ::core::option::Option<u32>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10023)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc10023 {
    #[prost(uint32, required, tag = "2")]
    pub user_id: u32,
    #[prost(uint32, optional, tag = "4")]
    pub server_load: ::core::option::Option<u32>,
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
    #[prost(uint32, optional, tag = "5")]
    pub db_load: ::core::option::Option<u32>,
    #[prost(string, required, tag = "3")]
    pub server_ticket: ::prost::alloc::string::String,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10993)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs10993 {
    #[prost(uint32, required, tag = "1")]
    pub action_system: u32,
    #[prost(uint32, required, tag = "2")]
    pub action_id: u32,
    #[prost(string, required, tag = "3")]
    pub action_des: ::prost::alloc::string::String,
    #[prost(uint32, optional, tag = "4")]
    pub action_arg: ::core::option::Option<u32>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10994)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs10994 {
    #[prost(uint32, required, tag = "1")]
    pub r#type: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10019)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc10019 {
    #[prost(message, repeated, tag = "1")]
    pub serverlist: ::prost::alloc::vec::Vec<Serverinfo>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(10700)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs10700 {
    #[prost(string, required, tag = "2")]
    pub sub_platform: ::prost::alloc::string::String,
    #[prost(string, required, tag = "1")]
    pub platform: ::prost::alloc::string::String,
    #[prost(uint32, required, tag = "3")]
    pub pack_index: u32,
}