// This file is @generated by prost-build.
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TaskUpdate {
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
    #[prost(uint32, required, tag = "3")]
    pub progress: u32,
    #[prost(uint32, required, tag = "2")]
    pub mode: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20012)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc20012 {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "2")]
    pub award_list: ::prost::alloc::vec::Vec<super::common::Dropinfo>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20013)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs20013 {
    #[prost(uint32, required, tag = "2")]
    pub item_cost: u32,
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20104)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc20104 {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u32>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20203)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc20203 {
    #[prost(message, repeated, tag = "1")]
    pub info: ::prost::alloc::vec::Vec<ActTaskList>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20208)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc20208 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
    #[prost(message, repeated, tag = "2")]
    pub award_list: ::prost::alloc::vec::Vec<super::common::Dropinfo>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20017)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc20017 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20001)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc20001 {
    #[prost(message, repeated, tag = "1")]
    pub info: ::prost::alloc::vec::Vec<super::common::Taskinfo>,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActTaskList {
    #[prost(message, repeated, tag = "2")]
    pub tasks: ::prost::alloc::vec::Vec<ActTask>,
    #[prost(uint32, required, tag = "1")]
    pub act_id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20004)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc20004 {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20006)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc20006 {
    #[prost(message, repeated, tag = "2")]
    pub award_list: ::prost::alloc::vec::Vec<super::common::Dropinfo>,
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20011)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs20011 {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20015)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc20015 {
    #[prost(uint32, required, tag = "1")]
    pub time: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WeeklyInfo {
    #[prost(uint32, required, tag = "3")]
    pub reward_lv: u32,
    #[prost(message, repeated, tag = "1")]
    pub task: ::prost::alloc::vec::Vec<WeeklyTask>,
    #[prost(uint32, required, tag = "2")]
    pub pt: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20101)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc20101 {
    #[prost(message, required, tag = "1")]
    pub info: WeeklyInfo,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20010)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc20010 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ActTask {
    #[prost(uint32, required, tag = "2")]
    pub progress: u32,
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20007)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs20007 {
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20014)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc20014 {
    #[prost(message, repeated, tag = "2")]
    pub award_list: ::prost::alloc::vec::Vec<super::common::Dropinfo>,
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20103)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc20103 {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u32>,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WeeklyTask {
    #[prost(uint32, required, tag = "2")]
    pub progress: u32,
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20206)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc20206 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
    #[prost(message, repeated, tag = "2")]
    pub award_list: ::prost::alloc::vec::Vec<super::common::Dropinfo>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20009)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs20009 {
    #[prost(message, repeated, tag = "1")]
    pub progressinfo: ::prost::alloc::vec::Vec<TaskUpdate>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20108)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs20108 {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u32>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20207)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs20207 {
    #[prost(uint32, required, tag = "1")]
    pub act_id: u32,
    #[prost(uint32, required, tag = "2")]
    pub task_id: u32,
    #[prost(uint32, required, tag = "3")]
    pub item_cost: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20016)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs20016 {
    #[prost(uint32, required, tag = "3")]
    pub event_count: u32,
    #[prost(uint32, required, tag = "2")]
    pub event_target: u32,
    #[prost(uint32, required, tag = "1")]
    pub event_type: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20106)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs20106 {
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20111)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc20111 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
    #[prost(message, repeated, tag = "2")]
    pub award_list: ::prost::alloc::vec::Vec<super::common::Dropinfo>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20003)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc20003 {
    #[prost(message, repeated, tag = "1")]
    pub info: ::prost::alloc::vec::Vec<TaskAdd>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20105)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc20105 {
    #[prost(uint32, required, tag = "1")]
    pub pt: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20110)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs20110 {
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20107)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc20107 {
    #[prost(message, optional, tag = "2")]
    pub next: ::core::option::Option<WeeklyTask>,
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TaskAdd {
    #[prost(uint32, required, tag = "3")]
    pub accept_time: u32,
    #[prost(uint32, required, tag = "2")]
    pub progress: u32,
    #[prost(uint32, optional, tag = "4")]
    pub submit_time: ::core::option::Option<u32>,
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20102)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc20102 {
    #[prost(message, repeated, tag = "1")]
    pub task: ::prost::alloc::vec::Vec<WeeklyTask>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20201)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc20201 {
    #[prost(message, repeated, tag = "1")]
    pub info: ::prost::alloc::vec::Vec<ActTaskInitList>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20204)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc20204 {
    #[prost(message, repeated, tag = "1")]
    pub info: ::prost::alloc::vec::Vec<ActTaskList>,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TaskProgress {
    #[prost(uint32, required, tag = "2")]
    pub progress: u32,
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20205)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs20205 {
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub task_ids: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, required, tag = "1")]
    pub act_id: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActTaskInitList {
    #[prost(message, repeated, tag = "2")]
    pub tasks: ::prost::alloc::vec::Vec<ActTask>,
    #[prost(uint32, repeated, packed = "false", tag = "3")]
    pub finish_ids: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, required, tag = "1")]
    pub act_id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20005)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs20005 {
    #[prost(message, repeated, tag = "2")]
    pub choice_award: ::prost::alloc::vec::Vec<super::common::Dropinfo>,
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20109)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc20109 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
    #[prost(uint32, required, tag = "2")]
    pub pt: u32,
    #[prost(message, repeated, tag = "3")]
    pub next: ::prost::alloc::vec::Vec<WeeklyTask>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20002)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc20002 {
    #[prost(message, repeated, tag = "1")]
    pub info: ::prost::alloc::vec::Vec<TaskProgress>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20008)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc20008 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
    #[prost(message, optional, tag = "2")]
    pub task: ::core::option::Option<TaskAdd>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(20202)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc20202 {
    #[prost(message, repeated, tag = "1")]
    pub info: ::prost::alloc::vec::Vec<ActTaskList>,
}