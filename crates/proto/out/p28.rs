// This file is @generated by prost-build.
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ApartmentGiveGift {
    #[prost(uint32, required, tag = "2")]
    pub number: u32,
    #[prost(uint32, required, tag = "1")]
    pub gift_id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(28011)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs28011 {
    #[prost(uint32, required, tag = "1")]
    pub room_id: u32,
    #[prost(uint32, required, tag = "3")]
    pub ship_group: u32,
    #[prost(uint32, required, tag = "2")]
    pub collection_id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(28010)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc28010 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(28019)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs28019 {
    #[prost(uint32, required, tag = "1")]
    pub room_id: u32,
    #[prost(uint32, required, tag = "2")]
    pub ship_group: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(28012)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc28012 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(28005)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs28005 {
    #[prost(uint32, required, tag = "1")]
    pub ship_group: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(28090)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs28090 {
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub int_args: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, required, tag = "1")]
    pub track_typ: u32,
    #[prost(string, repeated, tag = "3")]
    pub str_args: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApartmentShip {
    #[prost(uint32, required, tag = "3")]
    pub favor_exp: u32,
    #[prost(uint32, required, tag = "5")]
    pub daily_favor: u32,
    #[prost(uint32, required, tag = "10")]
    pub name_cd: u32,
    #[prost(uint32, repeated, packed = "false", tag = "6")]
    pub dialogues: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "4")]
    pub regular_trigger: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, required, tag = "8")]
    pub cur_skin: u32,
    #[prost(string, required, tag = "9")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, repeated, packed = "false", tag = "7")]
    pub skins: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, required, tag = "1")]
    pub ship_group: u32,
    #[prost(uint32, required, tag = "2")]
    pub favor_lv: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ApartmentGift {
    #[prost(uint32, required, tag = "1")]
    pub gift_id: u32,
    #[prost(uint32, required, tag = "2")]
    pub number: u32,
    #[prost(uint32, required, tag = "3")]
    pub used_number: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(28002)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc28002 {
    #[prost(message, required, tag = "2")]
    pub room: ApartmentRoom,
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(28006)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc28006 {
    #[prost(message, repeated, tag = "2")]
    pub drop_list: ::prost::alloc::vec::Vec<super::common::Dropinfo>,
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(28022)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc28022 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(28003)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs28003 {
    #[prost(uint32, required, tag = "1")]
    pub ship_group: u32,
    #[prost(uint32, required, tag = "2")]
    pub trigger_id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(28013)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs28013 {
    #[prost(uint32, required, tag = "2")]
    pub skin: u32,
    #[prost(uint32, required, tag = "1")]
    pub ship_group: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(28004)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc28004 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(28018)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc28018 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ApartmentGiftShop {
    #[prost(uint32, required, tag = "2")]
    pub count: u32,
    #[prost(uint32, required, tag = "1")]
    pub gift_id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(28000)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc28000 {
    #[prost(message, repeated, tag = "5")]
    pub furniture_daily: ::prost::alloc::vec::Vec<ApartmentGiftShop>,
    #[prost(message, repeated, tag = "6")]
    pub furniture_permanent: ::prost::alloc::vec::Vec<ApartmentGiftShop>,
    #[prost(message, repeated, tag = "4")]
    pub gift_permanent: ::prost::alloc::vec::Vec<ApartmentGiftShop>,
    #[prost(message, repeated, tag = "8")]
    pub rooms: ::prost::alloc::vec::Vec<ApartmentRoom>,
    #[prost(message, repeated, tag = "2")]
    pub ships: ::prost::alloc::vec::Vec<ApartmentShip>,
    #[prost(message, repeated, tag = "1")]
    pub gifts: ::prost::alloc::vec::Vec<ApartmentGift>,
    #[prost(message, repeated, tag = "3")]
    pub gift_daily: ::prost::alloc::vec::Vec<ApartmentGiftShop>,
    #[prost(uint32, required, tag = "7")]
    pub daily_vigor_max: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(28017)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs28017 {
    #[prost(uint32, required, tag = "1")]
    pub r#type: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(28015)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs28015 {
    #[prost(uint32, required, tag = "1")]
    pub dialog_id: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ApartmentFurniture {
    #[prost(uint32, required, tag = "2")]
    pub slot_id: u32,
    #[prost(uint32, required, tag = "1")]
    pub furniture_id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(28007)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs28007 {
    #[prost(uint32, required, tag = "1")]
    pub room_id: u32,
    #[prost(message, repeated, tag = "2")]
    pub furnitures: ::prost::alloc::vec::Vec<ApartmentFurniture>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(28020)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc28020 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(28001)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs28001 {
    #[prost(uint32, required, tag = "1")]
    pub room_id: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApartmentRoom {
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
    #[prost(uint32, repeated, packed = "false", tag = "4")]
    pub ships: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "2")]
    pub furnitures: ::prost::alloc::vec::Vec<ApartmentFurniture>,
    #[prost(uint32, repeated, packed = "false", tag = "3")]
    pub collections: ::prost::alloc::vec::Vec<u32>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(28009)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs28009 {
    #[prost(message, repeated, tag = "2")]
    pub gifts: ::prost::alloc::vec::Vec<ApartmentGiveGift>,
    #[prost(uint32, required, tag = "1")]
    pub ship_group: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(28016)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc28016 {
    #[prost(message, repeated, tag = "2")]
    pub drop_list: ::prost::alloc::vec::Vec<super::common::Dropinfo>,
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(28014)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc28014 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(28021)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs28021 {
    #[prost(uint32, required, tag = "1")]
    pub ship_group: u32,
    #[prost(string, required, tag = "2")]
    pub name: ::prost::alloc::string::String,
}
#[derive(proto_derive::CmdID)]
#[cmdid(28008)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc28008 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}