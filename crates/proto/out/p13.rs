// This file is @generated by prost-build.
#[derive(proto_derive::CmdID)]
#[cmdid(13112)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc13112 {
    #[prost(message, repeated, tag = "1")]
    pub fleet_list: ::prost::alloc::vec::Vec<Elitefleetinfo>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13006)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc13006 {
    #[prost(uint32, required, tag = "5")]
    pub is_cri: u32,
    #[prost(message, repeated, tag = "3")]
    pub drop_list: ::prost::alloc::vec::Vec<super::common::Dropinfo>,
    #[prost(uint32, required, tag = "2")]
    pub exp: u32,
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
    #[prost(message, repeated, tag = "4")]
    pub new_collection: ::prost::alloc::vec::Vec<super::common::Collectioninfo>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13301)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs13301 {
    #[prost(uint32, required, tag = "1")]
    pub r#type: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13402)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc13402 {
    #[prost(uint32, required, tag = "4")]
    pub progress: u32,
    #[prost(uint32, required, tag = "1")]
    pub next_refresh_time: u32,
    #[prost(uint32, required, tag = "2")]
    pub refresh_count: u32,
    #[prost(message, repeated, tag = "3")]
    pub chapter_list: ::prost::alloc::vec::Vec<ProChapterSubmarine>,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReactchapterInfo {
    #[prost(uint32, required, tag = "1")]
    pub count: u32,
    #[prost(uint32, required, tag = "2")]
    pub active_timestamp: u32,
    #[prost(uint32, required, tag = "3")]
    pub active_id: u32,
    #[prost(uint32, required, tag = "4")]
    pub daily_count: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13110)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc13110 {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub drop_ship_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13504)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc13504 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AiAct {
    #[prost(message, repeated, tag = "5")]
    pub map_update: ::prost::alloc::vec::Vec<Chaptercellinfo>,
    #[prost(message, repeated, tag = "10")]
    pub cell_flag_list: ::prost::alloc::vec::Vec<Cellflag>,
    #[prost(uint32, optional, tag = "7")]
    pub commander_skill_effect_id: ::core::option::Option<u32>,
    #[prost(message, required, tag = "1")]
    pub ai_pos: Chaptercellpos,
    #[prost(uint32, optional, tag = "8")]
    pub act_type: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "9")]
    pub hp_del: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "6")]
    pub ship_update: ::prost::alloc::vec::Vec<Shipinchapter>,
    #[prost(uint32, optional, tag = "2")]
    pub strategy_id: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "4")]
    pub move_path: ::prost::alloc::vec::Vec<Chaptercellpos>,
    #[prost(message, optional, tag = "3")]
    pub target_pos: ::core::option::Option<Chaptercellpos>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13001)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc13001 {
    #[prost(message, repeated, tag = "3")]
    pub fleet_list: ::prost::alloc::vec::Vec<Elitefleetinfo>,
    #[prost(message, optional, tag = "2")]
    pub react_chapter: ::core::option::Option<ReactchapterInfo>,
    #[prost(message, repeated, tag = "1")]
    pub chapter_list: ::prost::alloc::vec::Vec<Chapterinfo>,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chaptercellinfo {
    #[prost(uint32, optional, tag = "4")]
    pub item_flag: ::core::option::Option<u32>,
    #[prost(message, required, tag = "1")]
    pub pos: Chaptercellpos,
    #[prost(uint32, optional, tag = "5")]
    pub item_data: ::core::option::Option<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "6")]
    pub extra_id: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, required, tag = "2")]
    pub item_type: u32,
    #[prost(uint32, optional, tag = "3")]
    pub item_id: ::core::option::Option<u32>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13009)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs13009 {
    #[prost(uint32, required, tag = "1")]
    pub r#type: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13101)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs13101 {
    #[prost(uint32, optional, tag = "4")]
    pub operation_item: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "6")]
    pub fleet_duties: ::prost::alloc::vec::Vec<Fleetdutykeyvaluepair>,
    #[prost(uint32, optional, tag = "5")]
    pub loop_flag: ::core::option::Option<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub group_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "3")]
    pub elite_fleet_list: ::prost::alloc::vec::Vec<Elitefleetinfo>,
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Chaptercellpos {
    #[prost(uint32, required, tag = "1")]
    pub row: u32,
    #[prost(uint32, required, tag = "2")]
    pub column: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13107)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs13107 {
    #[prost(message, repeated, tag = "2")]
    pub elite_fleet_list: ::prost::alloc::vec::Vec<Elitefleetinfo>,
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cellflag {
    #[prost(message, required, tag = "1")]
    pub pos: Chaptercellpos,
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub flag_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EscortInfo {
    #[prost(uint32, required, tag = "1")]
    pub line_id: u32,
    #[prost(uint32, required, tag = "3")]
    pub flash_timestamp: u32,
    #[prost(message, repeated, tag = "4")]
    pub map: ::prost::alloc::vec::Vec<EscortPos>,
    #[prost(uint32, required, tag = "2")]
    pub award_timestamp: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13401)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs13401 {
    #[prost(uint32, required, tag = "1")]
    pub r#type: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13403)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs13403 {
    #[prost(uint32, required, tag = "2")]
    pub r#type: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13502)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc13502 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13008)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc13008 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13505)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs13505 {
    #[prost(uint32, required, tag = "1")]
    pub r#type: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13002)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc13002 {
    #[prost(uint32, required, tag = "2")]
    pub max_team: u32,
    #[prost(message, repeated, tag = "1")]
    pub collection_list: ::prost::alloc::vec::Vec<super::common::Collectioninfo>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13106)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs13106 {
    #[prost(uint32, required, tag = "1")]
    pub arg: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ProChapterSubmarine {
    #[prost(uint32, required, tag = "2")]
    pub active_time: u32,
    #[prost(uint32, required, tag = "3")]
    pub index: u32,
    #[prost(uint32, required, tag = "1")]
    pub chapter_id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13507)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs13507 {
    #[prost(uint32, required, tag = "2")]
    pub pos: u32,
    #[prost(uint32, required, tag = "1")]
    pub chapter_id: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExpeditionDailyCount {
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
    #[prost(uint32, required, tag = "2")]
    pub count: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13501)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs13501 {
    #[prost(uint32, required, tag = "1")]
    pub active_id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13000)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc13000 {
    #[prost(message, optional, tag = "2")]
    pub current_chapter: ::core::option::Option<Currentchapterinfo>,
    #[prost(uint32, required, tag = "1")]
    pub daily_repair_count: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13003)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cs13003 {
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub ship_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13004)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc13004 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13506)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc13506 {
    #[prost(message, repeated, tag = "1")]
    pub remap_count_list: ::prost::alloc::vec::Vec<Remapcount>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13105)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc13105 {
    #[prost(message, repeated, tag = "1")]
    pub map_update: ::prost::alloc::vec::Vec<Chaptercellinfo>,
    #[prost(uint32, repeated, packed = "false", tag = "5")]
    pub buff_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "2")]
    pub ai_list: ::prost::alloc::vec::Vec<Chaptercellinfo>,
    #[prost(uint32, repeated, packed = "false", tag = "4")]
    pub del_flag_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "6")]
    pub cell_flag_list: ::prost::alloc::vec::Vec<Cellflag>,
    #[prost(uint32, repeated, packed = "false", tag = "3")]
    pub add_flag_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Currentchapterinfo {
    #[prost(uint32, required, tag = "18")]
    pub init_ship_count: u32,
    #[prost(message, repeated, tag = "5")]
    pub ai_list: ::prost::alloc::vec::Vec<Chaptercellinfo>,
    #[prost(message, repeated, tag = "20")]
    pub battle_statistics: ::prost::alloc::vec::Vec<Strategyinfo>,
    #[prost(uint32, repeated, packed = "false", tag = "9")]
    pub operation_buff: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "4")]
    pub group_list: ::prost::alloc::vec::Vec<Groupinchapter>,
    #[prost(message, repeated, tag = "14")]
    pub cell_flag_list: ::prost::alloc::vec::Vec<Cellflag>,
    #[prost(message, repeated, tag = "16")]
    pub chapter_strategy_list: ::prost::alloc::vec::Vec<Strategyinfo>,
    #[prost(uint32, required, tag = "2")]
    pub time: u32,
    #[prost(uint32, repeated, packed = "false", tag = "11")]
    pub buff_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "13")]
    pub extra_flag_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "21")]
    pub fleet_duties: ::prost::alloc::vec::Vec<Fleetdutykeyvaluepair>,
    #[prost(uint32, optional, tag = "10")]
    pub model_act_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "8")]
    pub is_submarine_auto_attack: ::core::option::Option<u32>,
    #[prost(uint32, required, tag = "22")]
    pub move_step_count: u32,
    #[prost(message, repeated, tag = "6")]
    pub escort_list: ::prost::alloc::vec::Vec<Chaptercellinfo>,
    #[prost(uint32, required, tag = "15")]
    pub chapter_hp: u32,
    #[prost(uint32, required, tag = "17")]
    pub kill_count: u32,
    #[prost(uint32, required, tag = "19")]
    pub continuous_kill_count: u32,
    #[prost(uint32, required, tag = "7")]
    pub round: u32,
    #[prost(uint32, optional, tag = "12")]
    pub loop_flag: ::core::option::Option<u32>,
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
    #[prost(message, repeated, tag = "3")]
    pub cell_list: ::prost::alloc::vec::Vec<Chaptercellinfo>,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Strategyinfo {
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
    #[prost(uint32, required, tag = "3")]
    pub count: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13109)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs13109 {
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Chapterinfo {
    #[prost(uint32, required, tag = "5")]
    pub take_box_count: u32,
    #[prost(uint32, required, tag = "2")]
    pub progress: u32,
    #[prost(uint32, required, tag = "7")]
    pub today_defeat_count: u32,
    #[prost(uint32, required, tag = "8")]
    pub pass_count: u32,
    #[prost(uint32, required, tag = "4")]
    pub kill_enemy_count: u32,
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
    #[prost(uint32, required, tag = "3")]
    pub kill_boss_count: u32,
    #[prost(uint32, required, tag = "6")]
    pub defeat_count: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EscortPos {
    #[prost(uint32, required, tag = "2")]
    pub chapter_id: u32,
    #[prost(uint32, required, tag = "1")]
    pub map_id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13102)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc13102 {
    #[prost(message, optional, tag = "2")]
    pub current_chapter: ::core::option::Option<Currentchapterinfo>,
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13011)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc13011 {
    #[prost(message, repeated, tag = "1")]
    pub collection: ::prost::alloc::vec::Vec<super::common::Collectioninfo>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13007)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs13007 {
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13104)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc13104 {
    #[prost(message, repeated, tag = "4")]
    pub map_update: ::prost::alloc::vec::Vec<Chaptercellinfo>,
    #[prost(message, repeated, tag = "8")]
    pub submarine_act_list: ::prost::alloc::vec::Vec<AiAct>,
    #[prost(uint32, repeated, packed = "false", tag = "11")]
    pub buff_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
    #[prost(message, repeated, tag = "3")]
    pub drop_list: ::prost::alloc::vec::Vec<super::common::Dropinfo>,
    #[prost(message, repeated, tag = "10")]
    pub fleet_act_list: ::prost::alloc::vec::Vec<AiAct>,
    #[prost(message, repeated, tag = "2")]
    pub move_path: ::prost::alloc::vec::Vec<Chaptercellpos>,
    #[prost(uint32, repeated, packed = "false", tag = "13")]
    pub del_flag_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "9")]
    pub escort_act_list: ::prost::alloc::vec::Vec<AiAct>,
    #[prost(message, repeated, tag = "6")]
    pub ai_list: ::prost::alloc::vec::Vec<Chaptercellinfo>,
    #[prost(message, repeated, tag = "5")]
    pub ship_update: ::prost::alloc::vec::Vec<Shipinchapter>,
    #[prost(message, repeated, tag = "7")]
    pub ai_act_list: ::prost::alloc::vec::Vec<AiAct>,
    #[prost(uint32, repeated, packed = "false", tag = "12")]
    pub add_flag_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "14")]
    pub cell_flag_list: ::prost::alloc::vec::Vec<Cellflag>,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Elitefleetinfo {
    #[prost(message, repeated, tag = "3")]
    pub commanders: ::prost::alloc::vec::Vec<super::common::Commandersinfo>,
    #[prost(uint32, optional, tag = "1")]
    pub map_id: ::core::option::Option<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub main_id: ::prost::alloc::vec::Vec<u32>,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Groupinchapter {
    #[prost(uint32, required, tag = "4")]
    pub step_count: u32,
    #[prost(message, repeated, tag = "2")]
    pub ship_list: ::prost::alloc::vec::Vec<Shipinchapter>,
    #[prost(message, repeated, tag = "10")]
    pub commander_list: ::prost::alloc::vec::Vec<super::common::Commandersinfo>,
    #[prost(message, repeated, tag = "5")]
    pub box_strategy_list: ::prost::alloc::vec::Vec<Strategyinfo>,
    #[prost(message, repeated, tag = "6")]
    pub ship_strategy_list: ::prost::alloc::vec::Vec<Strategyinfo>,
    #[prost(uint32, required, tag = "8")]
    pub bullet: u32,
    #[prost(message, required, tag = "9")]
    pub start_pos: Chaptercellpos,
    #[prost(message, required, tag = "3")]
    pub pos: Chaptercellpos,
    #[prost(uint32, required, tag = "11")]
    pub move_step_down: u32,
    #[prost(uint32, required, tag = "13")]
    pub fleet_id: u32,
    #[prost(uint32, repeated, packed = "false", tag = "7")]
    pub strategy_ids: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, required, tag = "12")]
    pub kill_count: u32,
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Shipinchapter {
    #[prost(uint32, required, tag = "2")]
    pub hp_rant: u32,
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13201)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc13201 {
    #[prost(message, repeated, tag = "4")]
    pub chapter_count_list: ::prost::alloc::vec::Vec<ExpeditionDailyCount>,
    #[prost(uint32, required, tag = "2")]
    pub elite_expedition_count: u32,
    #[prost(message, repeated, tag = "1")]
    pub count_list: ::prost::alloc::vec::Vec<ExpeditionDailyCount>,
    #[prost(uint32, repeated, packed = "false", tag = "5")]
    pub quick_expedition_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, required, tag = "3")]
    pub escort_expedition_count: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13503)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs13503 {
    #[prost(uint32, required, tag = "1")]
    pub r#type: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13508)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc13508 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
    #[prost(message, repeated, tag = "2")]
    pub drop_list: ::prost::alloc::vec::Vec<super::common::Dropinfo>,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fleetdutykeyvaluepair {
    #[prost(uint32, required, tag = "2")]
    pub value: u32,
    #[prost(uint32, required, tag = "1")]
    pub key: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13108)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc13108 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Remapcount {
    #[prost(uint32, required, tag = "3")]
    pub count: u32,
    #[prost(uint32, required, tag = "1")]
    pub chapter_id: u32,
    #[prost(uint32, required, tag = "2")]
    pub pos: u32,
    #[prost(uint32, required, tag = "4")]
    pub flag: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13005)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs13005 {
    #[prost(uint32, required, tag = "1")]
    pub id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13010)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc13010 {
    #[prost(message, repeated, tag = "2")]
    pub collection_list: ::prost::alloc::vec::Vec<super::common::Collectioninfo>,
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13302)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sc13302 {
    #[prost(message, repeated, tag = "2")]
    pub drop_list: ::prost::alloc::vec::Vec<super::common::Dropinfo>,
    #[prost(message, repeated, tag = "1")]
    pub escort_info: ::prost::alloc::vec::Vec<EscortInfo>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13111)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs13111 {
    #[prost(uint32, required, tag = "1")]
    pub ship_id: u32,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13404)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Sc13404 {
    #[prost(uint32, required, tag = "1")]
    pub result: u32,
    #[prost(message, optional, tag = "2")]
    pub chapter_id: ::core::option::Option<ProChapterSubmarine>,
}
#[derive(proto_derive::CmdID)]
#[cmdid(13103)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cs13103 {
    #[prost(uint32, optional, tag = "7")]
    pub act_arg_5: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub act_arg_1: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub act_arg_2: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub act_arg_3: ::core::option::Option<u32>,
    #[prost(uint32, required, tag = "2")]
    pub group_id: u32,
    #[prost(uint32, optional, tag = "6")]
    pub act_arg_4: ::core::option::Option<u32>,
    #[prost(uint32, required, tag = "1")]
    pub act: u32,
}