use std::collections::HashMap;
use serde::Deserialize;
use serde_json::Value;

#[derive(Debug, Deserialize)]
#[serde(transparent)]
pub struct ChapterTemplate(pub HashMap<String, ChapterTemplateEntity>);

#[derive(Debug, Deserialize)]
pub struct ChapterTemplateEntity {
    #[serde(rename = "ItemTransformPattern")]
    pub item_transform_pattern: Value,
    pub act_id: i32,
    pub ai_expedition_list: Vec<i32>,
    pub ai_refresh: Vec<i32>,
    pub air_dominance: i32,
    pub alarm_cell: Value,
    pub ambush_event_ratio: Value,
    pub ambush_expedition_list: Vec<i32>,
    pub ambush_ratio_extra: Vec<Vec<i32>>,
    pub ammo_submarine: i32,
    pub ammo_total: i32,
    pub avoid_ratio: i32,
    pub avoid_require: i32,
    pub awards: Vec<Vec<i32>>,
    pub best_air_dominance: i32,
    pub bg: String,
    pub bgm: String,
    pub boss_expedition_id: Vec<i32>,
    pub boss_refresh: i32,
    pub box_list: Value,
    pub box_refresh: Vec<i32>,
    pub chapter_fx: Value,
    pub chapter_name: String,
    pub chapter_strategy: Vec<i32>,
    pub chapter_tag: i32,
    pub collection_team: i32,
    pub count: i32,
    pub defeat_story: Value,
    pub defeat_story_count: Vec<i32>,
    pub difficulty: i32,
    pub elite_expedition_list: Vec<i32>,
    pub elite_refresh: Vec<i32>,
    pub enemy_refresh: Vec<i32>,
    pub enter_story: String,
    pub enter_story_limit: String,
    pub event_skip: i32,
    pub expedition_id_weight_list: Vec<Vec<i32>>,
    pub float_items: Value,
    pub formation: i32,
    pub friendly_id: i32,
    pub grids: Vec<Vec<Value>>,
    pub group_num: i32,
    pub guarder_expedition_list: Vec<i32>,
    pub icon: Vec<String>,
    pub icon_outline: i32,
    pub id: i32,
    pub investigation_ratio: i32,
    pub is_ai: i32,
    pub is_air_attack: i32,
    pub is_ambush: i32,
    pub is_limit_move: i32,
    pub land_based: Value,
    pub levelstage_bar: String,
    pub limitation: Value,
    pub lose_condition: Vec<Vec<i32>>,
    pub lose_condition_display: String,
    pub map: i32,
    pub mitigation_level: i32,
    pub mitigation_rate: i32,
    pub model: i32,
    pub name: String,
    pub npc_data: Value,
    pub num_1: i32,
    pub num_2: i32,
    pub num_3: i32,
    pub oil: i32,
    pub patrolai_expedition_list: Vec<i32>,
    pub patrolai_refresh: Vec<i32>,
    pub pop_pic: String,
    pub pos_x: String,
    pub pos_y: String,
    pub pre_chapter: Value,
    pub pre_story: i32,
    pub profiles: String,
    pub progress_boss: i32,
    pub property_limitation: Value,
    pub random_box_list: Vec<i32>,
    pub risk_levels: Vec<Vec<i32>>,
    pub scale: Vec<f64>,
    pub special_operation_list: String,
    pub star_require_1: i32,
    pub star_require_2: i32,
    pub star_require_3: i32,
    pub story_refresh: Vec<Value>,
    pub story_refresh_boss: String,
    pub submarine_expedition_list: Vec<i32>,
    pub submarine_num: i32,
    pub submarine_refresh: Vec<i32>,
    pub support_group_num: i32,
    pub theme: Value,
    pub time: i32,
    pub r#type: i32,
    pub uifx: String,
    pub unlocklevel: i32,
    pub use_oil_limit: Vec<i32>,
    pub wall_prefab: Value,
    pub weather_grids: Value,
    pub win_condition: Vec<Value>,
    pub win_condition_display: String,
}
